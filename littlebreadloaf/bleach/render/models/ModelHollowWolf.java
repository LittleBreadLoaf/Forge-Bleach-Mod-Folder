// Date: 9/13/2013 11:00:42 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package littlebreadloaf.bleach.render.models;

import littlebreadloaf.bleach.entities.EntityHollowWolf;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.passive.EntityWolf;
import net.minecraft.util.MathHelper;

public class ModelHollowWolf extends ModelBase
{
  //fields
    ModelRenderer Body;
    ModelRenderer Mane;
    ModelRenderer Ear1;
    ModelRenderer Ear2;
    ModelRenderer WolfHead;
    ModelRenderer Jaw;
    ModelRenderer Nose;
    ModelRenderer Tail1;
    ModelRenderer Tail2;
    ModelRenderer Tail4;
    ModelRenderer Tail3;
    ModelRenderer Tail5;
    ModelRenderer Tail6;
    ModelRenderer upperleg_LF;
    ModelRenderer lower_leg_LF;
    ModelRenderer paw_LF;
    ModelRenderer upperleg_LB;
    ModelRenderer midleg_LB;
    ModelRenderer lower_leg_LB;
    ModelRenderer paw_LB;
    ModelRenderer upperleg_RF;
    ModelRenderer lower_leg_RF;
    ModelRenderer paw_RF;
    ModelRenderer upperleg_RB;
    ModelRenderer midleg_RB;
    ModelRenderer lower_leg_RB;
    ModelRenderer pawRB;
  
  public ModelHollowWolf()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      Body = new ModelRenderer(this, 44, 21);
      Body.addBox(-4F, -3F, -2F, 8, 11, 8);
      Body.setRotationPoint(0F, 12F, 3F);
      Body.setTextureSize(128, 128);
      Body.mirror = true;
      setRotation(Body, 1.37881F, 0F, 0F);
      Mane = new ModelRenderer(this, 44, 0);
      Mane.addBox(-6F, -5F, -3F, 12, 10, 11);
      Mane.setRotationPoint(0F, 13F, -3F);
      Mane.setTextureSize(128, 128);
      Mane.mirror = true;
      setRotation(Mane, 1.692969F, 0F, 0F);
      Ear1 = new ModelRenderer(this, 0, 0);
      Ear1.addBox(-3F, -5F, 1F, 2, 2, 1);
      Ear1.setRotationPoint(0F, 9.5F, -11F);
      Ear1.setTextureSize(128, 128);
      Ear1.mirror = true;
      setRotation(Ear1, 0F, 0F, 0F);
      Ear2 = new ModelRenderer(this, 0, 0);
      Ear2.addBox(1F, -5F, 1F, 2, 2, 1);
      Ear2.setRotationPoint(0F, 9.5F, -11F);
      Ear2.setTextureSize(128, 128);
      Ear2.mirror = true;
      setRotation(Ear2, 0F, 0F, 0F);
      WolfHead = new ModelRenderer(this, 0, 0);
      WolfHead.addBox(-4F, -3F, -3F, 8, 8, 6);
      WolfHead.setRotationPoint(0F, 9.5F, -11F);
      WolfHead.setTextureSize(128, 128);
      WolfHead.mirror = true;
      setRotation(WolfHead, 0F, 0F, 0F);
      Jaw = new ModelRenderer(this, 28, 0);
      Jaw.addBox(-2.5F, 2F, -8.5F, 5, 3, 6);
      Jaw.setRotationPoint(0F, 9.5F, -11F);
      Jaw.setTextureSize(128, 128);
      Jaw.mirror = true;
      setRotation(Jaw, 0F, 0F, 0F);
      Nose = new ModelRenderer(this, 0, 14);
      Nose.addBox(-3F, 0F, -9F, 6, 4, 6);
      Nose.setRotationPoint(0F, 9.5F, -11F);
      Nose.setTextureSize(128, 128);
      Nose.mirror = true;
      setRotation(Nose, 0F, 0F, 0F);
      Tail1 = new ModelRenderer(this, 0, 56);
      Tail1.addBox(-1.5F, 0F, -1.5F, 3, 3, 3);
      Tail1.setRotationPoint(0F, 9F, 11F);
      Tail1.setTextureSize(128, 128);
      Tail1.mirror = true;
      setRotation(Tail1, 1.130069F, 0F, 0F);
      Tail2 = new ModelRenderer(this, 0, 62);
      Tail2.addBox(-2F, 3F, -2F, 4, 4, 4);
      Tail2.setRotationPoint(0F, 0F, 0F);
      Tail2.setTextureSize(128, 128);
      Tail2.mirror = true;
      setRotation(Tail2, 0F, 0F, 0F);
      Tail4 = new ModelRenderer(this, 0, 79);
      Tail4.addBox(-2F, 10F, -2F, 4, 4, 4);
      Tail4.setRotationPoint(0F, 0F, 0F);
      Tail4.setTextureSize(128, 128);
      Tail4.mirror = true;
      setRotation(Tail4, 0F, 0F, 0F);
      Tail3 = new ModelRenderer(this, 0, 70);
      Tail3.addBox(-2.5F, 7F, -2.5F, 5, 4, 5);
      Tail3.setRotationPoint(0F, 0F, 0F);
      Tail3.setTextureSize(128, 128);
      Tail3.mirror = true;
      setRotation(Tail3, 0F, 0F, 0F);
      Tail5 = new ModelRenderer(this, 0, 87);
      Tail5.addBox(-1.5F, 14F, -1.5F, 3, 2, 3);
      Tail5.setRotationPoint(0F, 0F, 0F);
      Tail5.setTextureSize(128, 128);
      Tail5.mirror = true;
      setRotation(Tail5, 0F, 0F, 0F);
      Tail6 = new ModelRenderer(this, 0, 92);
      Tail6.addBox(-1F, 16F, -1F, 2, 2, 2);
      Tail6.setRotationPoint(0F, 0F, 0F);
      Tail6.setTextureSize(128, 128);
      Tail6.mirror = true;
      setRotation(Tail6, 1.130069F, 0F, 0F);
      upperleg_LF = new ModelRenderer(this, 0, 25);
      upperleg_LF.addBox(-1F, -2F, -1.5F, 3, 8, 3);
      upperleg_LF.setRotationPoint(5.5F, 11F, -5F);
      upperleg_LF.setTextureSize(128, 128);
      upperleg_LF.mirror = true;
      setRotation(upperleg_LF, 0F, 0F, 0F);
      lower_leg_LF = new ModelRenderer(this, 0, 36);
      lower_leg_LF.addBox(-0.5F, 4F, -0.5F, 2, 8, 2);
      lower_leg_LF.setRotationPoint(0F, 1F, 0F);
      lower_leg_LF.setTextureSize(128, 128);
      lower_leg_LF.mirror = true;
      setRotation(lower_leg_LF, -0.2617994F, 0F, 0F);
      paw_LF = new ModelRenderer(this, 8, 41);
      paw_LF.addBox(-1F, 11F, -5F, 3, 2, 3);
      paw_LF.setRotationPoint(0F, 0F, 0F);
      paw_LF.setTextureSize(128, 128);
      paw_LF.mirror = true;
      setRotation(paw_LF, 0.2617994F, 0F, 0F);
      upperleg_LB = new ModelRenderer(this, 44, 42);
      upperleg_LB.addBox(0F, -2F, -5F, 3, 4, 7);
      upperleg_LB.setRotationPoint(4F, 10F, 8F);
      upperleg_LB.setTextureSize(128, 128);
      upperleg_LB.mirror = true;
      setRotation(upperleg_LB, 0.7853982F, 0F, 0F);
      midleg_LB = new ModelRenderer(this, 44, 53);
      midleg_LB.addBox(0.5F, 2F, -5F, 2, 7, 2);
      midleg_LB.setRotationPoint(0F, 0F, 0F);
      midleg_LB.setTextureSize(128, 128);
      midleg_LB.mirror = true;
      setRotation(midleg_LB, -0.3490659F, 0F, 0F);
      lower_leg_LB = new ModelRenderer(this, 52, 53);
      lower_leg_LB.addBox(-1F, 5F, -12F, 3, 3, 6);
      lower_leg_LB.setRotationPoint(1F, 0F, 0F);
      lower_leg_LB.setTextureSize(128, 128);
      lower_leg_LB.mirror = true;
      setRotation(lower_leg_LB, 0.3490659F, 0F, 0F);
      paw_LB = new ModelRenderer(this, 44, 62);
      paw_LB.addBox(-0.5F, 12F, -7F, 4, 2, 5);
      paw_LB.setRotationPoint(-1F, 0F, 0F);
      paw_LB.setTextureSize(128, 128);
      paw_LB.mirror = true;
      setRotation(paw_LB, -0.7853982F, 0F, 0F);
      upperleg_RF = new ModelRenderer(this, 0, 25);
      upperleg_RF.addBox(-2F, -2F, -1.5F, 3, 8, 3);
      upperleg_RF.setRotationPoint(-5.5F, 11F, -5F);
      upperleg_RF.setTextureSize(128, 128);
      upperleg_RF.mirror = true;
      setRotation(upperleg_RF, 0F, 0F, 0F);
      lower_leg_RF = new ModelRenderer(this, 0, 36);
      lower_leg_RF.addBox(-1.5F, 4F, -0.5F, 2, 8, 2);
      lower_leg_RF.setRotationPoint(0F, 1F, 0F);
      lower_leg_RF.setTextureSize(128, 128);
      lower_leg_RF.mirror = true;
      setRotation(lower_leg_RF, -0.2617994F, 0F, 0F);
      paw_RF = new ModelRenderer(this, 8, 41);
      paw_RF.addBox(-2F, 11F, -5F, 3, 2, 3);
      paw_RF.setRotationPoint(0F, 0F, 0F);
      paw_RF.setTextureSize(128, 128);
      paw_RF.mirror = true;
      setRotation(paw_RF, 0.2617994F, 0F, 0F);
      upperleg_RB = new ModelRenderer(this, 44, 42);
      upperleg_RB.addBox(-3F, -2F, -5F, 3, 4, 7);
      upperleg_RB.setRotationPoint(-4F, 10F, 8F);
      upperleg_RB.setTextureSize(128, 128);
      upperleg_RB.mirror = true;
      setRotation(upperleg_RB, 0.7853982F, 0F, 0F);
      midleg_RB = new ModelRenderer(this, 44, 53);
      midleg_RB.addBox(-2.5F, 2F, -5F, 2, 7, 2);
      midleg_RB.setRotationPoint(0F, 0F, 0F);
      midleg_RB.setTextureSize(128, 128);
      midleg_RB.mirror = true;
      setRotation(midleg_RB, -0.3490659F, 0F, 0F);
      lower_leg_RB = new ModelRenderer(this, 52, 53);
      lower_leg_RB.addBox(-2F, 5F, -12F, 3, 3, 6);
      lower_leg_RB.setRotationPoint(-1F, 0F, 0F);
      lower_leg_RB.setTextureSize(128, 128);
      lower_leg_RB.mirror = true;
      setRotation(lower_leg_RB, 0.3490659F, 0F, 0F);
      pawRB = new ModelRenderer(this, 44, 62);
      pawRB.addBox(-3.5F, 12F, -7F, 4, 2, 5);
      pawRB.setRotationPoint(1F, 0F, 0F);
      pawRB.setTextureSize(128, 128);
      pawRB.mirror = true;
      setRotation(pawRB, -0.7853982F, 0F, 0F);
      
      
      Tail1.addChild(this.Tail2);
      Tail2.addChild(this.Tail3);
      Tail3.addChild(this.Tail4);
      Tail4.addChild(this.Tail5);
      Tail5.addChild(this.Tail6);
      
      upperleg_LF.addChild(this.lower_leg_LF);
      upperleg_RF.addChild(this.lower_leg_RF);
      upperleg_LB.addChild(this.midleg_LB);
      upperleg_RB.addChild(this.midleg_RB);
      midleg_LB.addChild(this.lower_leg_LB);
      midleg_RB.addChild(this.lower_leg_RB);
      
      lower_leg_LF.addChild(this.paw_LF);
      lower_leg_RF.addChild(this.paw_RF);
      lower_leg_LB.addChild(this.paw_LB);
      lower_leg_RB.addChild(this.pawRB);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Body.render(f5);
    Mane.render(f5);
    Ear1.render(f5);
    Ear2.render(f5);
    WolfHead.render(f5);
    Jaw.render(f5);
    Nose.render(f5);
    Tail1.render(f5);
    //Tail2.render(f5);
    //Tail4.render(f5);
    //Tail3.render(f5);
    //Tail5.render(f5);
    //Tail6.render(f5);
    upperleg_LF.render(f5);
    //lower_leg_LF.render(f5);
    //paw_LF.render(f5);
    upperleg_LB.render(f5);
    //midleg_LB.render(f5);
    //lower_leg_LB.render(f5);
    //paw_LB.render(f5);
    upperleg_RF.render(f5);
    //lower_leg_RF.render(f5);
    //paw_RF.render(f5);
    upperleg_RB.render(f5);
    //midleg_RB.render(f5);
    //lower_leg_RB.render(f5);
    //pawRB.render(f5);
  }
  
  
  
  /**
   * Used for easily adding entity-dependent animations. The second and third float params here are the same second
   * and third as in the setRotationAngles method.
   */
  public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4)
  {

      

     
     

  }
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);

    EntityHollowWolf wolf =  (EntityHollowWolf)entity;
    

    
    //Idle
   
    if(f1 < 0.00001)
    {
    	this.Tail1.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) );
    	this.Tail2.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) ) ;
    	this.Tail3.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) ) ;
    	this.Tail4.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) ) ;
    	this.Tail5.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) ) ;
    	this.Tail6.rotateAngleZ = 0.05F*(MathHelper.cos(f2 * 0.06662F) ) ;
    }
    
    //ELSE
    else
    {

    	this.Tail1.rotateAngleZ = 0;
    	this.Tail2.rotateAngleZ = 0;
    	this.Tail3.rotateAngleZ = 0;
    	this.Tail4.rotateAngleZ = 0;
    	this.Tail5.rotateAngleZ = 0;
    	this.Tail6.rotateAngleZ = 0;

        this.Tail1.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1 + 1.130069F;
        this.Tail2.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1;
        this.Tail3.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1;
        this.Tail4.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1;
        this.Tail5.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1;
        this.Tail6.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.1F * f1;
        
        //Front Legs
        this.upperleg_LF.rotateAngleX = MathHelper.sin(f * 0.3662F + ((float)Math.PI/3)) * 0.35F * f1;
        this.lower_leg_LF.rotateAngleX = MathHelper.sin(f * 0.3662F + ((float)Math.PI/3)) * 0.35F * f1 - 0.2617994F;
        this.upperleg_RF.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.35F * f1;
        this.lower_leg_RF.rotateAngleX = MathHelper.sin(f * 0.3662F) * 0.35F * f1 - 0.2617994F;
        
        //Back Legs
        this.upperleg_LB.rotateAngleX = MathHelper.sin(f * 0.3662F + (2 *(float)Math.PI/3)) * 0.25F * f1 + 0.7853982F;
        this.upperleg_RB.rotateAngleX = MathHelper.sin(f * 0.3662F + ((float)Math.PI)) * 0.25F * f1 + 0.7853982F;
        this.midleg_LB.rotateAngleX = MathHelper.sin(f * 0.3662F + (2 *(float)Math.PI/3)) * 0.25F * f1 - 0.3490659F;
        this.midleg_RB.rotateAngleX = MathHelper.sin(f * 0.3662F + ((float)Math.PI)) * 0.25F * f1 - 0.3490659F;
        this.lower_leg_LB.rotateAngleX = MathHelper.sin(f * 0.3662F + (2 *(float)Math.PI/3)) * 0.15F * f1 + 0.3490659F;
        this.lower_leg_RB.rotateAngleX = MathHelper.sin(f * 0.3662F + ((float)Math.PI)) * 0.15F * f1 + 0.3490659F;
    }

    
    
    
    
  }

}
